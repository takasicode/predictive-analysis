# -*- coding: utf-8 -*-
"""predictive-analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T9ioTmws7lxNxPo7LjuWPSIWL42VUbeh

# Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt

# %matplotlib inline

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

"""# Load Dataset"""

tlkm = pd.read_csv('TLKM.JK.csv')
tlkm.head()

"""# Data Understanding

Cek deskripsi statistik data menggunakan fungsi info()
"""

tlkm.info()

"""Cek deskripsi statistik data menggunakan fungsi describe()"""

tlkm.describe()

"""Cek jumlah baris dan kolom"""

tlkm.shape

"""Mengubah kolom Adj Close menjadi Adj_Close"""

tlkm.rename(columns={'Adj Close': 'Adj_Close'}, inplace=True)

"""Cek nilai yang hilang"""

tlkm.isnull().sum()

"""Periksa nilai nol di dataset"""

print("Jumlah nilai 0 dalam kolom Open:", (tlkm.Open == 0).sum())
print("Jumlah nilai 0 dalam kolom High:", (tlkm.High == 0).sum())
print("Jumlah nilai 0 dalam kolom Low:", (tlkm.Low == 0).sum())
print("Jumlah nilai 0 dalam kolom Close:", (tlkm.Close == 0).sum())
print("Jumlah nilai 0 dalam kolom Adj Close:", (tlkm.Adj_Close == 0).sum())
print("Jumlah nilai 0 dalam kolom Volume:", (tlkm.Volume == 0).sum())

"""Hapus nilai nol di dataset pada kolom Volume"""

tlkm = tlkm[tlkm.Volume != 0]

"""Cek ulang jumlah baris dan kolom terbaru"""

tlkm.shape

"""Cek outliers pada kolom Open"""

sns.boxplot(x=tlkm['Open'])

"""Cek outliers pada kolom High"""

sns.boxplot(x=tlkm['High'])

"""Cek outliers pada kolom Low"""

sns.boxplot(x=tlkm['Low'])

"""Cek outliers pada kolom Volume"""

sns.boxplot(x=tlkm['Volume'])

"""Cek skewness pada data"""

tlkm.hist(bins=50, figsize=(10, 10))
plt.show()

"""Cek korelasi data menggunakan pairplot"""

sns.pairplot(tlkm, diag_kind='kde')

"""Cek korelasi data menggunakan heatmap"""

plt.figure(figsize=(10, 8))
correlation_matrix = tlkm.corr(numeric_only=True).round(2)

sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix", size=20)

"""Hapus kolom Volume dan Adj_Close"""

tlkm.drop(['Volume', 'Adj_Close'], axis=1, inplace=True)
tlkm.head()

"""# Data Preparation

Cek korelasi data menggunakan pairplot pada fitur Open, High, dan Low
"""

sns.pairplot(tlkm[['Open', 'High', 'Low']], plot_kws={'s':3})

"""Sederhanakan fitur dengan PCA"""

pca = PCA(n_components=3, random_state=42)
pca.fit(tlkm[['Open', 'High', 'Low']])
principalComponents = pca.transform(tlkm[['Open', 'High', 'Low']])

"""Setelah menerapkan class PCA, cek proporsi informasi dari ketiga komponen PCs tersebut"""

pca.explained_variance_ratio_.round(3)

"""Gunakan komponen PCA pertama, buat kolom baru dengan hasil PCA, dan hapus kolom Open, High, dan Low"""

pca = PCA(n_components=1, random_state=42)
pca.fit(tlkm[['Open', 'High', 'Low']])
tlkm['pca'] = pca.transform(tlkm.loc[:, ('Open', 'High', 'Low')]).flatten()
tlkm.drop(['Open', 'High', 'Low'], axis=1, inplace=True)

"""Split data menjadi data Train dan Test"""

X = tlkm.drop(['Close', 'Date'], axis=1)
y = tlkm['Close']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""Scaling data menggunakan StandardScaler"""

scaler = StandardScaler()
X_train['pca'] = scaler.fit_transform(X_train)

"""# Modeling"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['LinearRegression', 'KNearestNeighbor', 'RandomForest', 'AdaptiveBoosting'])

"""Linear Regression"""

lr = LinearRegression()
lr.fit(X_train, y_train)

models.loc['train_mse','LinearRegression'] = mean_squared_error(y_pred=lr.predict(X_train), y_true=y_train)

"""K-Nearest Neighbor"""

knn = KNeighborsRegressor(n_neighbors=5)
knn.fit(X_train, y_train)

models.loc['train_mse','KNearestNeighbor'] = mean_squared_error(y_pred=knn.predict(X_train), y_true=y_train)

"""# Model Evaluation

Scaling data Test terhadap fitur numerik pada X_test
"""

X_test['pca'] = scaler.fit_transform(X_test)

"""Evaluasi model dengan metrik MSE"""

mse = pd.DataFrame(index=['train', 'test'], columns=['LinearRegression', 'KNearestNeighbor'])

model_dict = {'LinearRegression': lr, 'KNearestNeighbor': knn}

for model_name, model in model_dict.items():
    mse.loc['train', model_name] = mean_squared_error(y_pred=model.predict(X_train), y_true=y_train)/1e3
    mse.loc['test', model_name] = mean_squared_error(y_pred=model.predict(X_test), y_true=y_test)/1e3

mse

"""Plot metrik MSE dengan bar"""

fig, ax = plt.subplots(figsize=(10, 8))
mse.plot(kind='bar', ax=ax)
ax.set_ylabel('MSE')
ax.grid(zorder=0)

"""Untuk mengujinya, buat prediksi menggunakan beberapa harga dari data test"""

prediksi = X_test.iloc[:5].copy()
pred_dict = {'y_true':y_test[:5]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)

pd.DataFrame(pred_dict)